trigger:
  batch: true
  branches:
    include:
    - puff_master

pool: mypool

stages:
- stage: Build
  jobs:
  - job:
    container:
      image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bullseye:latest
    steps:
    - checkout: self
      clean: true
    - script: |
        set -ex
        sudo apt-get update
        sudo apt-get install -qq -y \
          libhiredis-dev \
          libnl-3-dev \
          libnl-genl-3-dev \
          libnl-route-3-dev \
          libnl-nf-3-dev \
          swig
      displayName: "Install dependencies"  
    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: puffc.sonic-buildimage
        artifact: sonic-buildimage.vs1
        buildVersionToDownload: latest
        allowFailedBuilds: true
        allowPartiallySucceededBuilds: true
        path: $(Build.ArtifactStagingDirectory)/download
        itemPattern: |
          target/debs/bullseye/libyang-*.deb
          target/debs/bullseye/libyang_*.deb
      displayName: "Download libyang packages"
    - script: |
        set -ex
        sudo dpkg -i $(find ./download -name *.deb)
      workingDirectory: $(Build.ArtifactStagingDirectory)
      displayName: "Install libyang from common lib"
    - script: |
        set -ex
        rm ../*.deb || true
        ./autogen.sh
        fakeroot debian/rules DEB_CONFIGURE_EXTRA_FLAGS='--enable-code-coverage' DEB_BUILD_PROFILES=nopython2 CFLAGS="" CXXFLAGS="--coverage -fprofile-abs-path" LDFLAGS="--coverage -fprofile-abs-path" binary
        mv ../*.deb .
      displayName: "Compile sonic swss common with coverage enabled"      
    - script: |
        set -ex
        sudo pip install Pympler==0.8 pytest
        sudo apt-get install -y redis-server
        sudo sed -i 's/notify-keyspace-events ""/notify-keyspace-events AKE/' /etc/redis/redis.conf
        sudo sed -ri 's/^# unixsocket/unixsocket/' /etc/redis/redis.conf
        sudo sed -ri 's/^unixsocketperm .../unixsocketperm 777/' /etc/redis/redis.conf
        sudo sed -ri 's/redis-server.sock/redis.sock/' /etc/redis/redis.conf
        sudo service redis-server restart
        sudo mkdir /usr/local/yang-models

        sudo dpkg -i libswsscommon_*.deb
        sudo dpkg -i libswsscommon-dev_*.deb
        sudo dpkg -i python3-swsscommon_*.deb

        ./tests/tests
        redis-cli FLUSHALL
        pytest-3 --cov=. --cov-report=xml
        [ -f coverage.xml ] && mv coverage.xml tests/coverage.xml
        gcovr -r ./ -e ".*/swsscommon_wrap.cpp" -e=tests --exclude-unreachable-branches --exclude-throw-branches --gcov-ignore-parse-errors -x --xml-pretty  -o coverage.xml
        make -C goext
        redis-cli FLUSHALL
        make -C goext check

        rm -rf $(Build.ArtifactStagingDirectory)/download
      displayName: "Run swss common unit tests"
    - publish: $(System.DefaultWorkingDirectory)/
      artifact: sonic-swss-common-bullseye
      displayName: "Archive swss common debian packages"
    - publish: $(Build.ArtifactStagingDirectory)/
      artifact: sonic-swss-pytests
      displayName: "Archive swss pytests"
    - script: |
        set -ex
        # Install .NET CORE
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/debian/12/prod
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-8.0
      displayName: "Install .NET CORE"
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
      displayName: 'Publish test coverage'
